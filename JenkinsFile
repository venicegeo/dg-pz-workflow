@Library('pipelib@master') _

def THREADFIX_ID = env.THREADFIX_ID ? env.THREADFIX_ID : '115'

node {
  def root = pwd()

  stage('Setup') {
    git([
      url: env.GIT_URL ? env.GIT_URL : 'https://github.com/venicegeo/dg-pz-workflow',
      branch: "master"
    ])
  }

  stage('Archive') {
    deleteDir()
    withGolang {
      sh """
        go get github.com/braintree/manners
        go get github.com/gin-gonic/gin
        go get github.com/stretchr/testify/assert
        go get gopkg.in/olivere/elastic.v3
        go get github.com/Shopify/sarama
        go get github.com/venicegeo/dg-pz-gocommon/gocommon
        go get github.com/venicegeo/dg-pz-logger

        go get github.com/venicegeo/dg-pz-workflow
        cd \$GOPATH/src/github.com/venicegeo/dg-pz-workflow

        go test -v github.com/venicegeo/dg-pz-workflow/workflow

        go build
        cp dg-pz-logger ${root}/pz-logger
        cd ${root}

        tar -cvzf pz-workflow.tgz \
            pz-workflow 
      """
    }
  }

  stage('CI Deploy') {
    cfPush()
    zap {
      threadfixId = THREADFIX_ID
    }
    cfBgDeploy()
  }

  stage('Integration Testing') {
    postman()
  }

  stage('Reset') {
    git([
      url: env.GIT_URL ? env.GIT_URL : 'https://github.com/venicegeo/pz-workflow',
      branch: "master"
    ])
  }

  stage('Staging Deploy') {
    cfPush {
      cfDomain  = 'stage.geointservices.io'
      cfSpace   = 'stage'
    }
    cfBgDeploy {
      cfDomain  = 'stage.geointservices.io'
      cfSpace   = 'stage'
    }
  }


  stage('Cleanup') {
    deleteDir()
  }
}
