@Library('pipelib@master') _

def THREADFIX_ID = env.THREADFIX_ID ? env.THREADFIX_ID : '115'

node {
  def root = pwd()
/*
    sh """
      cd
      ls -lrat
      rm -rf dg-pz-workflow
      git clone https://github.com/venicegeo/dg-pz-workflow
    """
*/
  stage('Setup') {
  
   git([
      url: env.GIT_URL ? env.GIT_URL : 'https://github.com/venicegeo/dg-pz-workflow',
      branch: "master"
   ])

  }
  
/*
        cd
        rm -rf $GOPATH/src/*
        mkdir -p $GOPATH/src/github.com/venicegeo
        mv dg-pz-workflow/ $GOPATH/src/github.com/venicegeo/
*/

  stage('Archive') {
    withGolang {
      sh """
        rm -rf $GOPATH/src/*
      
        go get github.com/braintree/manners
        go get github.com/gin-gonic/gin
        go get github.com/stretchr/testify/assert
        go get gopkg.in/olivere/elastic.v3
        go get github.com/Shopify/sarama
        go get github.com/venicegeo/dg-pz-gocommon/gocommon
        go get github.com/venicegeo/vegertar-cron

        go get github.com/venicegeo/dg-pz-workflow
        cd \$GOPATH/src/github.com/venicegeo/dg-pz-workflow

        go test -v github.com/venicegeo/dg-pz-workflow/workflow

        go build
        cp dg-pz-workflow ${root}/pz-workflow
        cd ${root}

        tar -cvzf pz-workflow.tgz \
            pz-workflow 
      """
   }
}

  stage('Staging Deploy') {
    try {
      cfPush()
      cfBgDeploy()
    } finally {
      stage('Cleanup') {
        deleteDir()
      }
    }	  
  }
}
